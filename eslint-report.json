[{"filePath":"/Users/romain/Projets/katas/front-katas/src/katas/anagram/__tests__/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"output":"import isAnagram from '../index';\n\nconst trueResult = { anagram: true };\nconst falseResult = { anagram: false };\nconst trueResultAndPalindrom = { anagram: true, specific: true };\n\ndescribe('isAnagram', () => {\n  it('should throw error if one of the word given is an empty string', () => {\n    expect(() => isAnagram('', 'word')).toThrow();\n    expect(() => isAnagram('word', '')).toThrow();\n  });\n\n  it('should throw error if one of the word given is shorter than 3 cars', () => {\n    expect(() => isAnagram('ab', 'bab')).toThrow();\n    expect(() => isAnagram('bab', 'ba')).toThrow();\n  });\n\n  it('should return true if given words are anagrams', () => {\n    expect(isAnagram('chien', 'niche')).toStrictEqual(trueResult);\n    expect(isAnagram('niche', 'chien')).toStrictEqual(trueResult);\n    expect(isAnagram('marie', 'maire')).toStrictEqual(trueResult);\n  });\n\n  it('should detect specific types of anagrams and set a specific flag to true if found', () => {\n    expect(isAnagram('trop', 'port')).toStrictEqual(trueResultAndPalindrom);\n    expect(isAnagram('port', 'trop')).toStrictEqual(trueResultAndPalindrom);\n    expect(isAnagram('bar', 'rab')).toStrictEqual(trueResultAndPalindrom);\n    expect(isAnagram('kayak', 'kayak')).toStrictEqual(trueResultAndPalindrom);\n  });\n\n  it('should false if given words are NOT anagrams', () => {\n    expect(isAnagram('rater', 'tarte')).toStrictEqual(falseResult);\n    expect(isAnagram('poule', 'poole')).toStrictEqual(falseResult);\n    expect(isAnagram('arme', 'marc')).toStrictEqual(falseResult);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/romain/Projets/katas/front-katas/src/katas/anagram/index.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_word1' is defined but never used.","line":1,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_word2' is defined but never used.","line":1,"column":36,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":50}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"output":"const isAnagram = (_word1: string, _word2: string): { anagram: boolean; specific?: boolean } => {\n  return { anagram: true };\n};\n\nexport default isAnagram;\n","usedDeprecatedRules":[]}]